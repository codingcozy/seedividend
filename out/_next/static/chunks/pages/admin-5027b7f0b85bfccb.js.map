{"version":3,"file":"static/chunks/pages/admin-5027b7f0b85bfccb.js","mappings":"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","sources":["webpack://_N_E/?a37b","webpack://_N_E/./hooks/useAdminAuth.ts","webpack://_N_E/./components/Modal.tsx","webpack://_N_E/./pages/admin/index.tsx","webpack://_N_E/./components/Modal.module.scss","webpack://_N_E/./pages/admin/admin.module.scss","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/admin\",\n      function () {\n        return require(\"private-next-pages/admin/index.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/admin\"])\n      });\n    }\n  ","import { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\n\n/**\n * Custom hook to handle admin page authorization\n * Restricts access to admin pages in production mode\n * @returns An object containing authorization status\n */\nexport default function useAdminAuth() {\n  const router = useRouter();\n  const [isAuthorized, setIsAuthorized] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    // In development mode, allow access\n    // In production mode, redirect to home\n    if (process.env.NODE_ENV !== \"development\") {\n      router.replace(\"/\");\n    } else {\n      setIsAuthorized(true);\n    }\n    setIsLoading(false);\n  }, [router]);\n\n  return { isAuthorized, isLoading };\n}\n","import { useEffect, useRef } from \"react\";\nimport classnames from \"classnames/bind\";\nimport style from \"./Modal.module.scss\";\n\nconst cx = classnames.bind(style);\n\ntype ModalProps = {\n  title: string;\n  onClose: () => void;\n  children: React.ReactNode;\n};\n\nexport default function Modal({ title, onClose, children }: ModalProps) {\n  const modalRef = useRef<HTMLDivElement>(null);\n\n  // ESC 키 눌렀을 때 모달 닫기\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === \"Escape\") {\n        onClose();\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [onClose]);\n\n  return (\n    <div className={cx(\"modal-overlay\")}>\n      <div className={cx(\"modal\")} ref={modalRef}>\n        <div className={cx(\"modal-header\")}>\n          <h2>{title}</h2>\n          <button onClick={onClose} className={cx(\"close-button\")}>\n            &times;\n          </button>\n        </div>\n        <div className={cx(\"modal-content\")}>{children}</div>\n      </div>\n    </div>\n  );\n}\n","import { useRouter } from \"next/router\";\nimport { getPostCategories, getPosts } from \"@/lib/api\";\nimport Header from \"@/components/Header\";\nimport style from \"./admin.module.scss\";\nimport classnames from \"classnames/bind\";\nimport PostType from \"@/interfaces/post\";\nimport CustomHead from \"@/components/CustomHead\";\nimport { CATEGORY, SITE_NAME } from \"@/lib/constants\";\nimport { useState, useEffect } from \"react\";\nimport Link from \"next/link\";\nimport useAdminAuth from \"@/hooks/useAdminAuth\";\nimport Modal from \"@/components/Modal\";\n\nconst cx = classnames.bind(style);\n\ntype Props = {\n  categoryList: string[];\n  allPosts: PostType[];\n  morePosts: PostType[];\n  preview?: boolean;\n};\n\n// 임시저장된 포스트 타입 정의\ntype TempPostType = {\n  id: string;\n  title: string;\n  date: string;\n  preview: string;\n};\n\nexport default function Post({ allPosts, categoryList }: Props) {\n  const router = useRouter();\n  const title = `${SITE_NAME} | Post`;\n  const [selectedPosts, setSelectedPosts] = useState<string[]>([]);\n  const [deletingPosts, setDeletingPosts] = useState<string[]>([]);\n  const [posts, setPosts] = useState<PostType[]>(allPosts);\n  const [isPublishing, setIsPublishing] = useState(false);\n  const [showTempModal, setShowTempModal] = useState(false);\n  const [tempPosts, setTempPosts] = useState<TempPostType[]>([]);\n  const [isLoadingTemp, setIsLoadingTemp] = useState(false);\n  const [deletingTempPosts, setDeletingTempPosts] = useState<string[]>([]);\n  const [isDeletingAllTemp, setIsDeletingAllTemp] = useState(false);\n\n  // Use the admin auth hook\n  const { isAuthorized, isLoading } = useAdminAuth();\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;\n  };\n\n  const toggleSelectPost = (slug: string) => {\n    if (selectedPosts.includes(slug)) {\n      setSelectedPosts(selectedPosts.filter((id) => id !== slug));\n    } else {\n      setSelectedPosts([...selectedPosts, slug]);\n    }\n  };\n\n  const toggleSelectAll = () => {\n    if (selectedPosts.length === posts.length) {\n      setSelectedPosts([]);\n    } else {\n      setSelectedPosts(posts.map((post) => post.slug));\n    }\n  };\n\n  const handleTitleClick = (slug: string) => {\n    router.push(`/post/${slug}/`);\n  };\n\n  const handleDeletePost = async (slug: string) => {\n    if (window.confirm(\"정말로 이 포스트를 삭제하시겠습니까?\")) {\n      try {\n        // Add the post to the deleting state\n        setDeletingPosts((prev) => [...prev, slug]);\n\n        // Updated API endpoint\n        const response = await fetch(`http://localhost:3001/api/delete-post?slug=${slug}`, {\n          method: \"DELETE\",\n        });\n\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.message || \"Failed to delete post\");\n        }\n\n        const result = await response.json();\n\n        // Update the posts list after deletion\n        setPosts(posts.filter((post) => post.slug !== slug));\n\n        // If the post was selected, remove it from selected posts\n        if (selectedPosts.includes(slug)) {\n          setSelectedPosts(selectedPosts.filter((id) => id !== slug));\n        }\n      } catch (error) {\n        console.error(\"Error deleting post:\", error);\n        alert(`포스트 삭제 중 오류가 발생했습니다: ${error instanceof Error ? error.message : \"알 수 없는 오류\"}`);\n      } finally {\n        // Remove the post from the deleting state\n        setDeletingPosts((prev) => prev.filter((id) => id !== slug));\n      }\n    }\n  };\n\n  const handleDeleteSelected = async () => {\n    if (selectedPosts.length === 0) {\n      alert(\"삭제할 포스트를 선택해주세요.\");\n      return;\n    }\n\n    if (window.confirm(`선택한 ${selectedPosts.length}개의 포스트를 삭제하시겠습니까?`)) {\n      // We'll delete one by one to ensure we handle each properly\n      let successCount = 0;\n      let failCount = 0;\n\n      for (const slug of selectedPosts) {\n        try {\n          setDeletingPosts((prev) => [...prev, slug]);\n\n          // Updated API endpoint\n          const response = await fetch(`http://localhost:3001/api/delete-post?slug=${slug}`, {\n            method: \"DELETE\",\n          });\n\n          if (!response.ok) {\n            throw new Error(\"Failed to delete post\");\n          }\n\n          successCount++;\n\n          // Remove the post from the deleting state\n          setDeletingPosts((prev) => prev.filter((id) => id !== slug));\n        } catch (error) {\n          failCount++;\n          console.error(`Error deleting post ${slug}:`, error);\n\n          // Remove the post from the deleting state\n          setDeletingPosts((prev) => prev.filter((id) => id !== slug));\n        }\n      }\n\n      // Update the posts list after deletion\n      setPosts(posts.filter((post) => !selectedPosts.includes(post.slug)));\n\n      // Clear selected posts\n      setSelectedPosts([]);\n\n      alert(`${successCount}개 포스트가 삭제되었습니다. ${failCount > 0 ? `${failCount}개 포스트 삭제 실패.` : \"\"}`);\n    }\n  };\n\n  const handlePublish = async () => {\n    if (window.confirm(\"블로그를 발행하시겠습니까?\")) {\n      try {\n        setIsPublishing(true);\n\n        const response = await fetch(\"http://localhost:3001/api/publish-post\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        });\n\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.message || \"Failed to publish blog\");\n        }\n\n        const result = await response.json();\n        alert(\"블로그가 성공적으로 발행되었습니다.\");\n      } catch (error) {\n        console.error(\"Error publishing blog:\", error);\n        alert(`블로그 발행 중 오류가 발생했습니다: ${error instanceof Error ? error.message : \"알 수 없는 오류\"}`);\n      } finally {\n        setIsPublishing(false);\n      }\n    }\n  };\n\n  const isDeleting = (slug: string) => deletingPosts.includes(slug);\n\n  // 임시저장 포스트 목록 가져오기 함수 개선\n  const fetchTempPosts = async () => {\n    try {\n      const response = await fetch(\"/api/temp-posts\");\n\n      if (!response.ok) {\n        throw new Error(\"임시저장 포스트 조회 실패\");\n      }\n\n      const data = await response.json();\n      setTempPosts(data.posts || []);\n      return data.posts;\n    } catch (error) {\n      console.error(\"임시저장 포스트 목록 조회 오류:\", error);\n      return [];\n    }\n  };\n\n  // 임시저장 포스트 선택 핸들러\n  const handleSelectTempPost = (id: string) => {\n    router.push(`/admin/create?tempId=${id}`);\n  };\n\n  // 임시저장 포스트 삭제 핸들러\n  const handleDeleteTempPost = async (e: React.MouseEvent, id: string) => {\n    e.stopPropagation(); // 클릭 이벤트 전파 방지 - 부모 요소의 클릭 이벤트 실행 방지\n\n    if (window.confirm(\"이 임시저장 포스트를 삭제하시겠습니까?\")) {\n      try {\n        setDeletingTempPosts((prev) => [...prev, id]);\n\n        const response = await fetch(`/api/temp-post/${id}`, {\n          method: \"DELETE\",\n        });\n\n        if (!response.ok) {\n          throw new Error(\"임시저장 포스트 삭제에 실패했습니다.\");\n        }\n\n        // 성공 시 목록에서 제거\n        setTempPosts((prevPosts) => prevPosts.filter((post) => post.id !== id));\n      } catch (error) {\n        console.error(\"임시저장 포스트 삭제 오류:\", error);\n        alert(\"임시저장 포스트를 삭제하는 중 오류가 발생했습니다.\");\n      } finally {\n        setDeletingTempPosts((prev) => prev.filter((postId) => postId !== id));\n      }\n    }\n  };\n\n  // 모든 임시저장 포스트 삭제 핸들러\n  const handleDeleteAllTempPosts = async () => {\n    if (tempPosts.length === 0) {\n      alert(\"삭제할 임시저장 포스트가 없습니다.\");\n      return;\n    }\n\n    if (window.confirm(`모든 임시저장 포스트(${tempPosts.length}개)를 삭제하시겠습니까?`)) {\n      try {\n        setIsDeletingAllTemp(true);\n\n        const response = await fetch(\"/api/temp-posts/delete-all\", {\n          method: \"DELETE\",\n        });\n\n        if (!response.ok) {\n          throw new Error(\"임시저장 포스트 전체 삭제에 실패했습니다.\");\n        }\n\n        const result = await response.json();\n\n        // 목록 비우기\n        setTempPosts([]);\n\n        alert(result.message || `${result.deletedCount}개의 임시저장 포스트가 삭제되었습니다.`);\n      } catch (error) {\n        console.error(\"임시저장 포스트 전체 삭제 오류:\", error);\n        alert(\"임시저장 포스트를 삭제하는 중 오류가 발생했습니다.\");\n      } finally {\n        setIsDeletingAllTemp(false);\n      }\n    }\n  };\n\n  // 임시저장 포스트 삭제 중인지 확인\n  const isDeleteTemp = (id: string) => deletingTempPosts.includes(id);\n\n  // 새 포스트 작성 클릭 핸들러 개선\n  const handleCreateNewPost = () => {\n    // 임시저장된 포스트가 있는지 확인 후 바로 모달 표시\n    setIsLoadingTemp(true);\n    console.log(\"Test\");\n    fetchTempPosts()\n      .then(() => {\n        setShowTempModal(true);\n      })\n      .catch((error) => {\n        console.error(\"임시저장 포스트 조회 실패:\", error);\n        router.push(\"/admin/create\");\n      })\n      .finally(() => {\n        setIsLoadingTemp(false);\n      });\n  };\n\n  // Show loading or unauthorized message\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!isAuthorized) {\n    return <div>Unauthorized access</div>;\n  }\n\n  return (\n    <>\n      {router.isFallback ? (\n        \" Loading…\"\n      ) : (\n        <>\n          <CustomHead type=\"home\" />\n          <div className={cx(\"container\", \"-list\")}>\n            <Header postList={posts} categoryList={categoryList} />\n            <div className={cx(\"inner\")}>\n              <div className={cx(\"admin_actions\")}>\n                <button onClick={handlePublish} className={cx(\"publish_btn\")} disabled={isPublishing}>\n                  {isPublishing ? \"발행 중...\" : \"발행\"}\n                </button>\n                <button onClick={handleCreateNewPost} className={cx(\"create_btn\")}>\n                  새 포스트 작성\n                </button>\n\n                {selectedPosts.length > 0 && (\n                  <button\n                    className={cx(\"bulk_delete_btn\")}\n                    onClick={handleDeleteSelected}\n                    disabled={deletingPosts.length > 0}\n                  >\n                    선택한 포스트 삭제 ({selectedPosts.length})\n                  </button>\n                )}\n              </div>\n\n              <div className={cx(\"post_list_header\")}>\n                <div className={cx(\"checkbox_cell\")}>\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedPosts.length === posts.length && posts.length > 0}\n                    onChange={toggleSelectAll}\n                  />\n                </div>\n                <div className={cx(\"title_cell\")}>제목</div>\n                <div className={cx(\"actions_cell\")}>작업</div>\n              </div>\n              <div className={cx(\"post_list\")}>\n                {posts.map((post) => (\n                  <div key={post.slug} className={cx(\"post_item\")}>\n                    <div className={cx(\"checkbox_cell\")}>\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedPosts.includes(post.slug)}\n                        onChange={() => toggleSelectPost(post.slug)}\n                        disabled={isDeleting(post.slug)}\n                      />\n                    </div>\n                    <div className={cx(\"title_cell\")}>\n                      <Link href={`/post/${post.slug}`} className={cx(\"title_link\")}>\n                        {post.title}\n                      </Link>\n                      <div className={cx(\"post_meta\")}>\n                        <span className={cx(\"post_category\")}>{CATEGORY[post.category]}</span>\n                        <span className={cx(\"separator\")}>•</span>\n                        <span className={cx(\"post_date\")}>{formatDate(post.date)}</span>\n                      </div>\n                    </div>\n                    <div className={cx(\"actions_cell\")}>\n                      <button\n                        className={cx(\"action_btn\", \"edit\")}\n                        onClick={() => router.push(`/admin/edit/${post.slug}`)}\n                        disabled={isDeleting(post.slug)}\n                      >\n                        수정\n                      </button>\n                      <button\n                        className={cx(\"action_btn\", \"delete\")}\n                        onClick={() => handleDeletePost(post.slug)}\n                        disabled={isDeleting(post.slug)}\n                      >\n                        {isDeleting(post.slug) ? \"삭제 중...\" : \"삭제\"}\n                      </button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              {posts.length === 0 && <div className={cx(\"no_posts\")}>포스트가 없습니다.</div>}\n            </div>\n          </div>\n\n          {/* 임시저장 포스트 모달 */}\n          {showTempModal && (\n            <Modal onClose={() => setShowTempModal(false)} title=\"임시저장된 포스트\">\n              {isLoadingTemp ? (\n                <div className={cx(\"loading_spinner\")}>\n                  <div className={cx(\"spinner\")}></div>\n                  <p>임시저장 포스트를 불러오는 중...</p>\n                </div>\n              ) : tempPosts && tempPosts.length > 0 ? (\n                <div className={cx(\"temp_post_list\")}>\n                  <p className={cx(\"temp_post_guide\")}>\n                    계속해서 작성하실 임시저장 포스트를 선택하거나, 새로 작성하실 수 있습니다.\n                  </p>\n                  <div className={cx(\"temp_post_wrap\")}>\n                    {tempPosts.map((post) => (\n                      <div key={post.id} className={cx(\"temp_post_item\")} onClick={() => handleSelectTempPost(post.id)}>\n                        <div className={cx(\"temp_post_content\")}>\n                          <h3 className={cx(\"temp_post_title\")}>{post.title}</h3>\n                          <p className={cx(\"temp_post_date\")}>{new Date(post.date).toLocaleString()}</p>\n                        </div>\n                        <button\n                          className={cx(\"temp_delete_btn\")}\n                          onClick={(e) => handleDeleteTempPost(e, post.id)}\n                          disabled={isDeleteTemp(post.id)}\n                        >\n                          {isDeleteTemp(post.id) ? \"삭제 중...\" : \"삭제\"}\n                        </button>\n                      </div>\n                    ))}\n                  </div>\n                  <div className={cx(\"temp_action_buttons\")}>\n                    <button\n                      className={cx(\"delete_all_btn\")}\n                      onClick={handleDeleteAllTempPosts}\n                      disabled={isDeletingAllTemp}\n                    >\n                      {isDeletingAllTemp ? \"삭제 중...\" : \"전체 삭제\"}\n                    </button>\n                    <button\n                      className={cx(\"new_post_btn\")}\n                      onClick={() => {\n                        setShowTempModal(false);\n                        router.push(\"/admin/create\");\n                      }}\n                    >\n                      새로 작성하기\n                    </button>\n                  </div>\n                </div>\n              ) : (\n                <div className={cx(\"no_temp_posts\")}>\n                  <p>임시저장된 포스트가 없습니다.</p>\n                  <button\n                    className={cx(\"new_post_btn\")}\n                    onClick={() => {\n                      setShowTempModal(false);\n                      router.push(\"/admin/create\");\n                    }}\n                  >\n                    새로 작성하기\n                  </button>\n                </div>\n              )}\n            </Modal>\n          )}\n        </>\n      )}\n    </>\n  );\n}\n\n// Switch back to getStaticProps for compatibility with static export\nexport async function getStaticProps() {\n  const allPosts = await getPosts({\n    fields: [\n      \"title\",\n      \"date\",\n      \"slug\",\n      \"author\",\n      \"coverImage\",\n      \"description\",\n      \"ogImage\",\n      \"tag\",\n      \"readingTime\",\n      \"category\",\n    ],\n  });\n\n  const categoryList = await getPostCategories();\n\n  return {\n    props: {\n      allPosts,\n      categoryList,\n    },\n  };\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal-overlay\":\"Modal_modal-overlay__bs7XG\",\"modal\":\"Modal_modal__2Aj4i\",\"modal-header\":\"Modal_modal-header__qukIe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post_content\":\"admin_post_content__ft_Pe\",\"container\":\"admin_container__sDpJg\",\"-list\":\"admin_-list__X_bjD\",\"inner\":\"admin_inner__jN_HH\",\"project_list\":\"admin_project_list__OuNd9\",\"ifram_wrap\":\"admin_ifram_wrap__aU42G\",\"iframe\":\"admin_iframe__NLBq7\",\"meta\":\"admin_meta__L_vxo\",\"date\":\"admin_date__la_NA\",\"post_meta\":\"admin_post_meta__U_4y9\",\"post_category\":\"admin_post_category__QaYM3\",\"separator\":\"admin_separator__vyCi5\",\"profile_wrap\":\"admin_profile_wrap__EVWVv\",\"profile_image_wrap\":\"admin_profile_image_wrap__XAo1n\",\"textarea\":\"admin_textarea__bh9P0\",\"info\":\"admin_info__2trzw\",\"reading_time\":\"admin_reading_time__Xpbe3\",\"post_title\":\"admin_post_title__J_A2i\",\"tag_area\":\"admin_tag_area__FvAZM\",\"tag\":\"admin_tag__9Px2L\",\"view_badge\":\"admin_view_badge__utAag\",\"post_list_header\":\"admin_post_list_header__Q_fWD\",\"post_list\":\"admin_post_list__djSuc\",\"post_item\":\"admin_post_item__pwAj9\",\"checkbox_cell\":\"admin_checkbox_cell__HiARW\",\"title_cell\":\"admin_title_cell___XYsg\",\"title_link\":\"admin_title_link__DA8PM\",\"actions_cell\":\"admin_actions_cell__4oldf\",\"action_btn\":\"admin_action_btn__TA3_2\",\"edit\":\"admin_edit__euMYR\",\"delete\":\"admin_delete__r3NKS\",\"view\":\"admin_view__M5heO\",\"share\":\"admin_share__guXKz\",\"admin_actions\":\"admin_admin_actions__yn899\",\"create_btn\":\"admin_create_btn__R59bD\",\"bulk_delete_btn\":\"admin_bulk_delete_btn__B0TwG\",\"no_posts\":\"admin_no_posts__UxSux\",\"admin_header\":\"admin_admin_header__yDNef\",\"admin_title\":\"admin_admin_title__SejFK\",\"back_btn\":\"admin_back_btn__gQ1ni\",\"create_form_container\":\"admin_create_form_container__NpHZ8\",\"post_form\":\"admin_post_form__eFezp\",\"form_group\":\"admin_form_group__MYnWL\",\"form_label\":\"admin_form_label__gd9oB\",\"form_input\":\"admin_form_input__K3kki\",\"form_select\":\"admin_form_select__X7DDt\",\"form_textarea\":\"admin_form_textarea__6i55x\",\"form_actions\":\"admin_form_actions__JHbQA\",\"cancel_btn\":\"admin_cancel_btn__y2MwJ\",\"submit_btn\":\"admin_submit_btn__weIP_\",\"error_message\":\"admin_error_message__2Gg_u\",\"publish_btn\":\"admin_publish_btn__0ypl_\",\"loading_spinner\":\"admin_loading_spinner__wrQY4\",\"spinner\":\"admin_spinner__BqN3h\",\"spin\":\"admin_spin__UgVYr\",\"temp_post_list\":\"admin_temp_post_list__yqAln\",\"temp_post_guide\":\"admin_temp_post_guide__A1IGR\",\"temp_post_wrap\":\"admin_temp_post_wrap__7bK0z\",\"temp_post_item\":\"admin_temp_post_item__YWkFy\",\"temp_post_content\":\"admin_temp_post_content__owSRn\",\"temp_post_title\":\"admin_temp_post_title__ozHfg\",\"temp_post_date\":\"admin_temp_post_date___qvTO\",\"temp_post_preview\":\"admin_temp_post_preview__laeKm\",\"temp_delete_btn\":\"admin_temp_delete_btn__rZ658\",\"temp_action_buttons\":\"admin_temp_action_buttons__ThGFy\",\"delete_all_btn\":\"admin_delete_all_btn__IITVt\",\"new_post_btn\":\"admin_new_post_btn__oU8XU\",\"no_temp_posts\":\"admin_no_temp_posts__bDfQr\"};"],"names":["window","__NEXT_P","push","__webpack_require__","useAdminAuth","router","useRouter","isAuthorized","setIsAuthorized","useState","isLoading","setIsLoading","useEffect","replace","cx","classnames","style","Modal","param","title","onClose","children","modalRef","useRef","handleKeyDown","event","key","document","addEventListener","removeEventListener","jsx_runtime","jsx","div","className","jsxs","ref","h2","button","onClick","Post","allPosts","categoryList","SITE_NAME","selectedPosts","setSelectedPosts","deletingPosts","setDeletingPosts","posts","setPosts","isPublishing","setIsPublishing","showTempModal","setShowTempModal","tempPosts","setTempPosts","isLoadingTemp","setIsLoadingTemp","deletingTempPosts","setDeletingTempPosts","isDeletingAllTemp","setIsDeletingAllTemp","formatDate","date","Date","dateString","getFullYear","getMonth","concat","getDate","toggleSelectPost","includes","slug","filter","id","toggleSelectAll","length","map","post","handleDeletePost","confirm","prev","response","fetch","method","ok","errorData","json","message","error","console","alert","Error","handleDeleteSelected","successCount","failCount","handlePublish","headers","isDeleting","fetchTempPosts","data","handleSelectTempPost","handleDeleteTempPost","e","stopPropagation","prevPosts","postId","handleDeleteAllTempPosts","result","deletedCount","isDeleteTemp","handleCreateNewPost","log","then","catch","finally","Fragment","isFallback","CustomHead","type","Header","postList","disabled","input","checked","onChange","Link","href","span","CATEGORY","category","p","h3","toLocaleString","module","exports"],"sourceRoot":""}