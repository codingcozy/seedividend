{"version":3,"file":"static/chunks/pages/admin/edit/[slug]-7fad52153910951f.js","mappings":"mFACA,CAAAA,OAAAC,QAAA,CAAAD,OAAAC,QAAA,MAAAC,IAAA,EACA,qBACA,WACA,OAAeC,EAAQ,KACvB,EACA,oLCOe,SAASC,EAASC,CAA6B,CAAE,IAA/B,CAAEC,KAAAA,CAAAA,CAAMC,aAAAA,CAAAA,CAAqB,CAA7BF,EAEzB,CAAEG,aAAAA,CAAAA,CAAcC,UAAAA,CAAAA,CAAW,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,IAC9BC,EAASC,CAAAA,EAAAA,EAAAA,SAAAA,IACT,CAACC,EAAcC,EAAgB,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAG3CC,EAAe,MAAOC,GAOtB,CACJH,EAAgB,IAEhB,GAAI,CAEF,IAAMI,EAAgBlB,OAAOmB,OAAO,CAAC,kBACrC,GAAI,CAACD,EAAe,CAClBJ,EAAgB,IAChB,MACF,CAAC,IAIKM,EAAed,EAAKe,IAAI,CAExBC,EAAa,CACjB,GAAGL,CAAQ,CACXM,KAAMjB,EAAKiB,IAAI,CACfC,KAAM,GACNH,KAAMD,CACR,EAGMK,EAAa,IAAIC,gBACjBC,EAAYC,WAAW,IAAMH,EAAWI,KAAK,GAAI,KAEjDC,EAAW,MAAMC,MAAM,8CAAwDC,MAAA,CAAV1B,EAAKiB,IAAI,EAAI,CACtFU,OAAQ,MACRC,QAAS,CACP,eAAgB,kBAClB,EACAC,KAAMC,KAAKC,SAAS,CAACf,GACrBgB,OAAQb,EAAWa,MAAM,GAK3B,GAFAC,aAAaZ,GAET,CAACG,EAASU,EAAE,CAAE,CAChB,IAAMC,EAAY,MAAMX,EAASY,IAAI,EACrC,OAAM,MAAUD,EAAUE,OAAO,EAAI,kBAAmB,CACzD,MAEK,uBACNhC,EAAOT,IAAI,CAAC,SACd,CAAE,MAAO0C,EAAK,CAEZ,MADAC,QAAQC,KAAK,CAAC,uBAAwBF,GAChCA,CAAI,QACF,CACR9B,EAAgB,GAClB,CACF,SAEA,EACS,GAAAiC,EAAAC,GAAA,EAACC,MAAAA,UAAI,YAGTzC,EAIDG,EAAOuC,UAAU,CACZ,GAAAH,EAAAC,GAAA,EAACC,MAAAA,UAAI,mBAIZ,GAAAF,EAAAI,IAAA,EAAAJ,EAAAK,QAAA,YACE,GAAAL,EAAAC,GAAA,EAACK,EAAAA,CAAUA,CAAAA,CAACC,KAAK,SACjB,GAAAP,EAAAC,GAAA,EAACO,EAAAA,CAAUA,CAAAA,CACTC,aAAclD,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMmD,KAAK,GAAI,GAC7BC,eAAgBpD,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMqD,OAAO,GAAI,GACjCC,gBAAiBtD,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMuD,QAAQ,GAAItD,CAAY,CAAC,EAAE,EAAI,GACtDuD,mBAAoBxD,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMyD,WAAW,GAAI,GACzCC,kBAAmB1D,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAM2D,UAAU,GAAI,GACvC1D,aAAcA,EACd2D,SAAUlD,EACVmD,iBAAiB,QACjBtD,aAAcA,EACduD,WAAY,GACZC,aAAc/D,MAAAA,EAAAA,KAAAA,EAAAA,EAAMiB,IAAI,MArBrB,GAAAwB,EAAAC,GAAA,EAACC,MAAAA,UAAI,eAHb,AA4BH","sources":["webpack://_N_E/?01aa","webpack://_N_E/./pages/admin/edit/[slug].tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/admin/edit/[slug]\",\n      function () {\n        return require(\"private-next-pages/admin/edit/[slug].tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/admin/edit/[slug]\"])\n      });\n    }\n  ","import { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { getPostCategories, getPosts } from \"@/lib/api\";\nimport CustomHead from \"@/components/CustomHead\";\nimport useAdminAuth from \"@/hooks/useAdminAuth\";\nimport PostEditor from \"@/components/PostEditor\";\nimport PostType from \"@/interfaces/post\";\n\ntype Props = {\n  post: PostType;\n  categoryList: string[];\n};\n\nexport default function EditPost({ post, categoryList }: Props) {\n  // 관리자 권한 체크\n  const { isAuthorized, isLoading } = useAdminAuth();\n  const router = useRouter();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // 폼 제출 처리\n  const handleSubmit = async (postData: {\n    title: string;\n    content: string;\n    category: string;\n    description: string;\n    coverImage: string;\n    tags: string;\n  }) => {\n    setIsSubmitting(true);\n\n    try {\n      // 사용자 확인 추가 - 수정을 확실히 할 것인지 확인\n      const confirmUpdate = window.confirm(\"포스트를 수정하시겠습니까?\");\n      if (!confirmUpdate) {\n        setIsSubmitting(false);\n        return;\n      }\n\n      // 날짜 처리 방식 수정\n      // 기존 날짜를 그대로 유지하여 시간대 변환 문제 방지\n      const originalDate = post.date;\n\n      const submitData = {\n        ...postData,\n        slug: post.slug,\n        tags: \"\",\n        date: originalDate, // 원본 날짜 문자열 그대로 전달\n      };\n\n      // 네트워크 요청 시 타임아웃 설정을 위한 컨트롤러\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30초 타임아웃\n\n      const response = await fetch(`http://localhost:3001/api/update-post?slug=${post.slug}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(submitData),\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId); // 타임아웃 해제\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"포스트 수정에 실패했습니다.\");\n      }\n\n      alert(\"포스트가 성공적으로 수정되었습니다.\");\n      router.push(\"/admin\");\n    } catch (err) {\n      console.error(\"Error updating post:\", err);\n      throw err;\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  if (isLoading) {\n    return <div>로딩 중...</div>;\n  }\n\n  if (!isAuthorized) {\n    return <div>접근 권한이 없습니다</div>;\n  }\n\n  if (router.isFallback) {\n    return <div>포스트를 불러오는 중...</div>;\n  }\n\n  return (\n    <>\n      <CustomHead type=\"home\" />\n      <PostEditor\n        initialTitle={post?.title || \"\"}\n        initialContent={post?.content || \"\"}\n        initialCategory={post?.category || categoryList[0] || \"\"}\n        initialDescription={post?.description || \"\"}\n        initialCoverImage={post?.coverImage || \"\"}\n        categoryList={categoryList}\n        onSubmit={handleSubmit}\n        submitButtonText=\"수정 완료\"\n        isSubmitting={isSubmitting}\n        isEditMode={true} // 편집 모드 활성화\n        originalSlug={post?.slug} // 원본 포스트 slug 전달\n      />\n    </>\n  );\n}\n\n// getStaticPaths로 편집 가능한 포스트 경로 생성\nexport async function getStaticPaths() {\n  // 개발 환경에서는 빌드 타임에 모든 경로를 미리 생성하지 않고 필요할 때 생성\n  return {\n    paths: [],\n    fallback: true,\n  };\n}\n\nexport async function getStaticProps({ params }: { params: { slug: string } }) {\n  try {\n    const [post]: any = await getPosts({\n      file: params.slug,\n      fields: [\n        \"title\",\n        \"description\",\n        \"date\",\n        \"slug\",\n        \"author\",\n        \"content\",\n        \"ogImage\",\n        \"coverImage\",\n        \"date\",\n        \"tag\",\n        \"readingTime\",\n        \"category\",\n      ],\n    });\n\n    const categoryList = await getPostCategories();\n\n    return {\n      props: {\n        post,\n        categoryList,\n      },\n      revalidate: 10,\n    };\n  } catch (error) {\n    console.error(`Error fetching post with slug ${params.slug}:`, error);\n    return {\n      notFound: true,\n    };\n  }\n}\n"],"names":["window","__NEXT_P","push","__webpack_require__","EditPost","param","post","categoryList","isAuthorized","isLoading","useAdminAuth","router","useRouter","isSubmitting","setIsSubmitting","useState","handleSubmit","postData","confirmUpdate","confirm","originalDate","date","submitData","slug","tags","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","concat","method","headers","body","JSON","stringify","signal","clearTimeout","ok","errorData","json","message","err","console","error","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","div","isFallback","jsxs","Fragment","CustomHead","type","PostEditor","initialTitle","title","initialContent","content","initialCategory","category","initialDescription","description","initialCoverImage","coverImage","onSubmit","submitButtonText","isEditMode","originalSlug"],"sourceRoot":""}